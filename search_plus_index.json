{"./":{"url":"./","title":"介绍","keywords":"","body":"MYDan(蚂蚁蛋助手)是一个开源的运维工具，它采用自定义的协议，来管理分布在全球各地区下隔离网络中的服务器。它具有如下特点 简单： 简单的安装方式，网络结构简单，可以方便的使用上专线资源 安全： 密钥可以定时更新 快速： 调用机器命令和传输文件非常高效 全面： 支持linux和window环境 MYDan在生成环境中已经被广泛使用。MYDan可以作为调度系统，作业平台，堡垒机等的核心组件。 MYDan支持两种协议，ssh协议和MYDan自定义协议。推荐使用MYDan自定义的协议。 一旦MYDan在所有的机器上运行起来之后，不管机器网络隔离的多么的复杂，批量操作机器、批量传输文件、获取远程shell和灰度发布等等都变得非常简单。 同时MYDan中带着大量的常用工具,点击查看工具详解 mydan book说明: book中的教程适合按照顺序进阶阅读，理解或者不需要该功能的情况下跳过，否则会影响对整体的理解. Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"quick_install/":{"url":"quick_install/","title":"快速安装","keywords":"","body":"快速安装 安装mydan curl -L http://update.mydan.org|sudo bash 在所有的机器上安装mydan，安装目录是/opt/mydan 启动mydan服务 /opt/mydan/dan/bootstrap/bin/bootstrap --start mydan的agent启动端口为65111 开机启动mydan服务 /opt/mydan/dan/bootstrap/bin/bootstrap --install 生成一对密钥 cd /opt/mydan/etc/agent/auth && \\ ssh-keygen -f mydan -P \"\" && \\ mv mydan mydan.key && \\ echo success 在控制机上生成一对公钥私钥 拷贝公钥 scp /opt/mydan/etc/agent/auth/mydan.pub 10.10.10.3:/opt/mydan/etc/agent/auth/mydan.pub 把公钥拷贝到所有的机器上 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"usage/":{"url":"usage/","title":"使用手册","keywords":"","body":"mydan使用手册 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"usage/getting-started.html":{"url":"usage/getting-started.html","title":"快速入门","keywords":"","body":"快速入门 服务都准备好了，应该如果使用，以下给大家逐步介绍一下 查看mydan mydan安装完后，会在/bin/建一个软连接指向mydan的命令行工具，但也有特殊的情况(如在mac中)。 如果没有/bin/mydan,可以直接执行/opt/mydan/bin/mydan root@feng-pc:/tmp# mydan Usage: mydan COMMAND [arg...] Options: --dan Switch to `dan` first. --box Switch to `box` first. Help show detail Commands: * go 登陆服务器. * range 操作对象描述. * whois 查询、模糊查询机器信息. * gateway 代理. * rcall 远程调用mydan的agent. * rtail tail多个远程机器日志. * vssh 虚拟登陆多个机器. * mssh 批量ssh命令. * mcmd 批量命令. * load 从远程机器下载文件. * rsync 同步文件. * mrsync 批量同步文件. * grsync 全局批量同步文件，可以在多个隔离的网络中通过代理同步. * access 给远程机器添加用户. * keys 给运程机器添加key信任. * config mydan配置. * shell 获取远程机器反弹shell. * alias mydan内部使用的alias. * unalias mydan内部使用的unalias. * fastmd5 快速计算文件md5. * sync 同步mydan的配置 * xtar 脚本和数据压缩工具. * git git命令，添加了指定key功能. * alarm 设置超时闹钟运行命令. * bigest 查找大文件. * expect 自动应答. * release 发布mydan. * supervisor 守护方式启动进程. * tai64nlocal 查看tai64格式日志. * diagnosis 系统诊断. * tcpserver 脚本提供tcp服务. * deploy 本地发布切连接小工具. * secure 私密文件管理小工具. * diskSpaceControl 控制磁盘使用空间在某个百分比. * node 机器管理. * reborn 重装系统. Run 'mydan COMMAND --help' for more information on a command. 尝试调用mydan远程命令 mydan rcall -r 127.0.0.1 exec w run .. 100% 1/1 ############################## RESULT ############################## ==================================================================== 127.0.0.1[1]: 13:18:37 up 221 days, 20:38, 1 user, load average: 0.08, 0.03, 0.05 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT root pts/1 10.10.10.10 12:21 5.00s 0.94s 0.73s /opt/mydan/perl/bin/perl /opt/mydan/dan/tools/rcall -r 127.0.0.1 exec w ==================================================================== 如果这个可以调用的通，说明agent部署和启动正常。 这里先不考虑隔离区域的情况，隔离区域在后续章节讨论 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"usage/node.html":{"url":"usage/node.html","title":"机器管理","keywords":"","body":"机器管理 [root@feng-pc tmp]# mydan node Usage: mydan.node COMMAND [arg...] Options: --dan Switch to `dan` first. --box Switch to `box` first. Help show detail Commands: * show show出cache中的机器 * dump dump出data中的机器 * cache 生成cache * load load数据到数据库 motify 修改数据 * purge 删除数据 Run 'mydan.node COMMAND --help' for more information on a command. 编辑机器配置文件 编辑自己的机器管理的配置文件,文件中的结构分成四层 第一层是项目名或者cluster名，第二层为机器属性（比如机房信息，模块）， 第三层为操作对象（比如机器),第四层为资源状态（比如监控系统和发布系统中，状态为0的不处理）。 cat > hostdb 加载配置文件 mydan node load hostdb dump出机器信息 mydan node dump #dump出所有的机器信息 mydan node dump project1 #dump出项目名为project1的机器信息 mydan node dump project1 --compress #压缩显示 mydan node dump --output /tmp/hostdb #dump到指定文件中 生成缓存cache mydan node cache 查看缓存 mydan node show mydan node show project1 与dump类似，区别在于show是在cache中读取的数据 修改状态 mydan node modfiy --range 127.0.0.1 -v 3 -c project1 -t idc1 # 把 project1下的idc1中的127.0.0.1状态改成3 mydan node cache #加载到缓存中 删除 mydan node purge --cluster project1 --table idc1 #删除project1下的所有idc1 其他 机器管理中的cache在路径 /opt/mydan/etc/node/cache 下，如果出现问题，可以在这里进行回滚 没有进入缓存之前的文件放在 /opt/mydan/etc/node/data 路径下 操作对象描述 有了机器管理，下面介绍一下操作对象描述 从机器管理中获取操作对象 获取所有的机器 mydan node range '{==*==*??==*}' 获取编号为1的所有机器: mydan node range '{==*==*??==1}' 通过插件的方式获取机器 /opt/mydan/dan/node/callback 下放了node的插件 默认情况下有两个插件，如果需要扩展可以自己开发 插件list， 在文件中获取机器列表： 如在目录/path/foo中有文件 a.list 和 b.list cd 进入/path/foo目录运行 mydan range '{%%list==a}' #获取a.list 的机器列表 mydan range '{%%list==a,b}' #获取a.list 和b.list的机器列表 mydan range '{%%list}' #获取所有以 .list文件为后缀的机器列表 node插件 mydan range '{%%node}' #获取机器管理中全部机器 表达式 mydan range 'node{1~100}' #获取 node1 到node100的列表 mydan range '{==project1==*??==*},10.10.10.10,-127.0.0.1,&/abc/' #获取project1下的所有机器，在加上10.10.10.10这个机器，在去掉127.0.0.1这个机器，在过滤出包涵字符abc的列表 操作 这样就可以批量操作多个机器了 [root@feng-pc ~]# mydan rcall -r '{==*==*??==*}' exec w run .. 100% 2/2 ############################## RESULT ############################## ==================================================================== 127.0.0.1,localhost[2]: 16:00:30 up 221 days, 23:20, 2 users, load average: 0.00, 0.01, 0.05 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT root pts/1 10.10.10.10 12:21 3:02 2.06s 2.06s -bash root pts/2 10.10.10.10 14:58 6.00s 0.79s 0.71s /opt/mydan/perl/bin/perl /opt/mydan/dan/tools/rcall -r {==*==*??==*} exec w ==================================================================== Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"usage/tools.html":{"url":"usage/tools.html","title":"核心工具","keywords":"","body":"核心工具 rcall 远程调用，在之前的例子展示过, [root@feng-pc ~]#mydan rcall SYNOPSIS $0 -r range [--sudo sudoer ] [--verbose] cmd .. [--user username (default `id -un`)] [--timeout seconds (default 60)] [--max number ( default 128 )] [--port number ( default from .config )] [--env \"A=123;B=abc\" ] [--version] [--secret \"x=1;xx=2\" ] 批量操作工具， 其中exec是执行命令的插件，查看更多插件 例 [root@feng-pc ~]#mydan rcall -r '127.0.0.1' exec w run .. 100% 1/1 ############################## RESULT ############################## ==================================================================== 127.0.0.1[1]: 18:22:17 up 1 day, 2:45, 2 users, load average: 0.30, 0.28, 0.34 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT feng tty7 :0 11:34 18:44m 10.87s 2.75s /sbin/upstart --user feng pts/2 127.0.0.1 18:16 9.00s 0.52s 0.40s /opt/mydan/perl/bin/perl /opt/mydan/dan/tools/rcall -r 127.0.0.1 exec w ==================================================================== grsync [root@feng-pc ~]#mydan grsync SYNOPSIS $0 [--src src-range(default `hostname`)] --dst dst-range --sp src-path [--dp dst-path] \\ [--timeout seconds(default 300)] [--max number(default 128)] [--retry number(default 2)] [--gave number(default 3)] [--user username(default `id -un`)] [--sudo user1 ] [--chown root] [--chmod 777] [--cc] -1 Forces grsync to try protocol version 1 -2 Forces grsync to try protocol version 2 -3 Forces grsync to try protocol version 3 -4 Forces grsync to try protocol version 4 --sp /path/file --dp /path/foo/newfile --sp /path/file --dp /path/foo/ --sp /path/ --dp /path/foo/ --sp /path/foo* --dp /path/foo/ --sp '/path/file1;/path/file2' --dp /path/foo/ 批量同步文件的工具， 点击查看详情 feng@feng-pc:~$ mydan grsync --src '127.0.0.1' --dst '127.0.0.1' --sp /tmp/file1 --dp /tmp/file2 ------------------------------------------------------------ sp:/tmp/file1 => dp:/tmp/file2 127.0.0.1 => 127.0.0.1: RSYNC 127.0.0.1 shell mydan shell -h 127.0.0.1 feng@feng-pc:~$ mydan shell -h 127.0.0.1 root@feng-pc:/home/feng# 获取远程shell是通过反弹shell的方式，如果隔离网络环境，这个功能需要控制机需要有公网ip mydan 2.0.0版本以上可以使用shellv2工具，这个不需要中控机有公网ip这个条件 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"usage/proxy.html":{"url":"usage/proxy.html","title":"网络代理","keywords":"","body":"网络代理 截止到上一节，您已经可以方便的在同机房内进行批量的操作、传输文件和获取远程shell。但是真实的网络环境可能很复杂。您的机器可能分布在多地区的多个机房，或者在网络不通的公有云的region中。这个时候就需要配置代理。 三种网络拓扑 每个服务器都安装了mydan并且启动了agent，网络隔离的情况下，每个区域都选择一两台作为代理的角色，让中控机的控制流量从入口进去 远程命令 批量操作会根据区域分布情况，把任务切割成每个区域一个，让任务在入口服务器执行，执行结束后结果汇总到中控机 同步文件 同步工具指定的源机器和目标机器都可以是多个 如果一个区域内即有源机器又有目标机器，数据同步的过程就会在本区域内完成，中控机只是发了一个调度任务到入口机器，入口机器来完成该区域的数据调度传输 如果一个区域只有源机器没有目标机器，这个区域的同步任务会被跳过 如果一个区域内没有源机器只有目标机器，中控机器会在有数据的区域通过入口服务器的网络把数据下载一份到中控机，中控机在把这个数据通过该区域的入口服务器把数据推到该区域的其中一台机器，然后在让这个区域内的服务器进行内部同步 默认情况下所有的agent的文件缓存功能都是打开的，文件传输过程中所有的经过服务器的文件都会缓存到默认路径/opt/mydan/var/run/filecache 下。如果不需要缓存功能，可以把这个目录删除 远程shell 中控机器mydan shell打来一个临时的端口等待反弹shell过来连接 获取远程shell的指令会通过入口服务器把指令发送到要获取的服务器上 反弹shell通过公网把shell反弹到中控机 考虑到有些机器是不可以上公网的，如果多区域情况下，中控机可能在别的机房，服务器的tcp直接通过公网连接到中控机连接不上，这时候需要shellv2， v2版本的shell在中控机不需要公网ip，被操作的机器也不需要可以上公网 配置 新建和编辑文件 /opt/mydan/etc/agent/proxy.private [root@feng-pc ~]# cat >> /opt/mydan/etc/agent/proxy.private mydan会通过这个配置的信息，把需要代理的服务器进行划分，如果机器被影射到同一个代理中，这些机器就会被当作一个区域。 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"usage/deploy.html":{"url":"usage/deploy.html","title":"发布平台","keywords":"","body":"发布系统 应用操作 发布管理 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"deploy/project.html":{"url":"deploy/project.html","title":"应用操作","keywords":"","body":"应用操作 路径 应用操作配置目录:/opt/mydan/etc/project/apps/ 应用检查配置目录:/opt/mydan/etc/project/check/ 应用发布配置目录:/opt/mydan/etc/project/deploy/ 应用操作 配置 [root@feng-pc]# ls /opt/mydan/etc/project/apps/project1/ start stop [root@feng-pc]# cat /opt/mydan/etc/project/apps/project1/start #!/bin/bash echo start 操作 [root@feng-pc]# mydan rcall -r 127.0.0.1 apps project1 start run .. 100% 1/1 ############################## RESULT ############################## ==================================================================== 127.0.0.1[1]: start [1]: [#!/bin/bash echo start ] start ==================================================================== 应用检查 配置 [root@feng-pc]# ls /opt/mydan/etc/project/check/ project1 project2 [root@feng-pc]# cat /opt/mydan/etc/project/check/project1 - addr: http://127.0.0.1:5555 check: 'mydan' # type: post # type: get default # data: a=1&b=2 # Host: abc.org - port: 8080 # type: tcp # type: udp default # host: abc.foo.org # host: 127.0.0.1 default 操作 [root@feng-pc]# mydan rcall -r 127.0.0.1 check project1 run .. 100% 1/1 ############################## RESULT ############################## ==================================================================== 127.0.0.1[1]: http://127.0.0.1:5555 <> mydan :OK tcp => 127.0.0.1:8080 :OK done. ==================================================================== 应用发布 配置 [root@feng-pc]# ls /opt/mydan/etc/project/deploy/ project1 project2 [root@feng-pc]# cat /opt/mydan/etc/project/deploy/project1 link: /data/apps/project1 path: /data/package/project1 程序包 [root@feng-pc]# ls /opt/mydan/etc/dashboard/download/package/ project1 [root@feng-pc]# ls /opt/mydan/etc/dashboard/download/package/project1/ v0.1 v0.1.md5 v0.2 v0.2.md5 启动dashboard dashboard 修改api地址 把要发布程序的机器把api指到对应的dashboar: mydan config api.addr=http://127.0.0.1:5555 操作 [root@feng-pc]# mydan rcall -r 127.0.0.1 deploy project1 deploy 其他 以上三个功能对应发布管理中的 m.apps,m.check,m.deploy Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"deploy/deploy.html":{"url":"deploy/deploy.html","title":"发布管理","keywords":"","body":"发布管理 路径 工具路径： /opt/mydan/dan/deploy/bin 发布流程路径：/opt/mydan/etc/deploy/conf 发布过程配置：/opt/mydan/etc/deploy/mould 一个conf下的配置对应一个发布流程。发布流程可以共用mould下的发布过程配置。 编辑发布过程配置 root@feng-pc:～# cat /opt/mydan/etc/deploy/mould/apps.test --- #- # title: show version # global: 1 # check: ## redo: 2 ## retry: 20 # repeat: 1 # delay: 2 ## sleep: 20 # code: m.sync # goon: 25% ## fix: 30 # param: # bin: 'echo a b c d version: 011.1' # sp: /tmp/adas/a/sda/ # user: search # proxy: foo # cont: '(version:.+)' - title: Run a command code: m.exec goon: 25% param: bin: 'echo abc' - title: ctrl apps code: m.apps goon: 25% param: name: project1 ctrl: [ 'start' ] - title: deploy code: m.deploy goon: 25% param: name: project1 ctrl: [ 'deploy' ] - title: mcmd code: m.mcmd goon: 25% param: bin: 'echo {}abc' - title: check code: m.check goon: 25% param: check: [ 'project1' ] 发布过程是一个数组，表示发布某一组机器的一系列动作。 title: 标题 code: 对应code目录中的插件 goon: 达到这个百分比才回继续往下走，否则会stuck，需要用ctrl去控制 param： 就是插件需要的参数 \b\b统一参数 title \b步骤的标题 global 是否是全局 redo \b重做次数 retry 重试次数，\b重试完后还是不正常就stuck repeat \b\b\b\b执行\b部分失败的时候，是否在重试重做的时候把所有的都重复执行\b delay 延时执行，sleep对应的秒数在执行 sleep 执行完后sleep code 插件 goon 判断步骤是否可以继续的\b阈值，一个数字或者\b百分比（如 100%），默认是100% fix 和重试类似，区别是在fix的时候，已经出现了\bstuck的信息 param 插件的参数 编辑流程 root@feng-pc:～# cat /opt/mydan/etc/deploy/conf/apps.test --- batch: code: b.node param: batch: - 1 - 1:2 target: # - 'localhost{1~10}' - '127.0.0.1' maint: mould: apps.test macro: version: 0001 aa: 0001 bb: $env{bb} aabbcc: $env{aabbcc} macro: a: 1 b: 1 bb: 22 aabbcc: 11221 batch: 表示获取机器分组， code: 分组的插件 param: 分组的参数 maint: 选择发布步骤配置 mould: 对应mould目录中的文件名 macro: 传递给mould的宏 macro: conf 中的宏 运行一次发布 root@feng-pc:/opt/mydan/dan/deploy/bin# ./deploy apps.test [1]: [127.0.0.1] =========================================================================== title: Run a command | step: 1| node:1 =========================================================================== ########################################################################### do ... --------------------------------------------------------------------------- time: 2018-12-14_14:16:17 node[1]: 127.0.0.1 ============================== --- 127.0.0.1[1]: \"abc\\n\" ============================== succ[1]:127.0.0.1 =========================================================================== title: ctrl apps | step: 1| node:1 =========================================================================== ########################################################################### do ... --------------------------------------------------------------------------- time: 2018-12-14_14:16:17 node[1]: 127.0.0.1 ============================== --- 127.0.0.1[1]: | start [1]: [#!/bin/bash echo start ] start ============================== succ[1]:127.0.0.1 =========================================================================== title: deploy | step: 1| node:1 =========================================================================== ########################################################################### do ... --------------------------------------------------------------------------- time: 2018-12-14_14:16:17 node[1]: 127.0.0.1 ============================== --- 127.0.0.1[1]: | [stage]: wget -c -t 10 -q -O '/data/package/project1/v0.2/pack.md5' 'http://127.0.0.1:5555/download/package/project1/v0.2.md5' ERROR: run stage ERROR ============================== [error]: goon: 0.25 succ: 0 err: 其中apps.test 名字是conf中的文件名 可以在命令后添加宏参数，如 ./deploy apps.test \"abc=123\" 查看stuck情况 root@feng-pc:/opt/mydan/dan/deploy/bin# ./watch --------------------------------------------------------------------------- name: apps.test --- stuck: deploy: '1': 'error:goon: 0.25 succ: 0 err:' 解锁 root@feng-pc:/opt/mydan/dan/deploy/bin# ./ctrl -R apps.test 解锁完后发布继续执行 插件 插件用前缀来区分类型，\"b.\"开头的为分批插件，\"m.“开头的是发布过程使用的插件 分组插件要返回一个二维的数组 发布流程插件返回的是操作成功的列表hash b.node batch: code: b.node param: batch: - 1 - 1:2 target: - 'localhost{1~10}' - '127.0.0.1' 这是conf中的配置，param是插件的参数，b.node 需要两个参数 target和batch，target 是range表达式的range。batch是分批的方式,也是数组的方式，数组和target一一对应，如果batch比target短，由batch数组最后的元素补齐。对于每一个元素用“:”分隔着获取多少元素，可以是数组也可以是白分比（如10%），获取不全的用最后一个来补。如 1:5%:10 表示第一批是1台机器，第二批是5%的机器，第三批是10%的机器，如果海域哦机器，后面就都是10%一批 m.apps - title: ctrl apps code: m.apps goon: 25% param: name: project1 ctrl: [ 'start' ] [root@feng-pc]# cat /opt/mydan/etc/project/apps/project1/start #!/bin/bash echo start 执行应用操作 m.check - title: check code: m.check goon: 25% param: check: [ 'project1' ] [root@feng-pc]# cat /opt/mydan/etc/project/check/project1 - addr: http://127.0.0.1:5555 check: 'mydan' # type: post # type: get default # data: a=1&b=2 # Host: abc.org - port: 8080 # type: tcp # type: udp default # host: abc.foo.org # host: 127.0.0.1 default 检查应用 m.deploy title: deploy code: m.deploy goon: 25% param: name: project1 ctrl: [ 'deploy' ] [root@feng-pc]# cat /opt/mydan/etc/project/deploy/project1 link: /data/apps/project1 path: /data/package/project1 发布应用 m.exec - title: Run a command code: m.exec goon: 25% param: bin: 'echo abc' 调用agent的exec，即执行远程命令 m.lock - title: Lock code: m.lock goon: 25% stuck，让运行步骤在该位置停止 m.mcmd - title: mcmd code: m.mcmd goon: 25% param: bin: 'echo {}abc' 批量执行命令，和tools中的mcmd一样 m.sync - title: sync code: m.sync goon: 25% param: sp: /tmp/file1 dp: /tmp/file2 src: 'localhost' 同步数据 src 默认为中控机本地 timeout 超时时间，默认是60，单位秒 max 并发数，默认500 user 执行用户，默认root sudo 真实的执行用户 chown 目标文件属主 chmod 目标文件权限 cc 等于1时继承源文件属性 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"usage/monitor.html":{"url":"usage/monitor.html","title":"监控平台","keywords":"","body":"监控系统 对于监控系统，会被分解成多个模块进行分步讲解 监控管理 订阅管理 值班管理 报警接入 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"monitor/collector.html":{"url":"monitor/collector.html","title":"监控管理","keywords":"","body":"监控管理 路径 /opt/mydan/dan/monitorv2 编辑配置 root@feng-pc:/opt/mydan/dan/monitorv2/conf# cat sysinfo --- target: localhost,127.0.0.1 interval: 60 code: sysinfo param: test: cpu: - '{CPU}{all}{%idle} 1' - '{CPU}{all}{%user} > 90' disk: - '{DF}{/da10}{Use%} > 90' - '{DF}{/da11}{Use%} > 90' - '{DF}{/da12}{Use%} > 90' - '{DF}{/da14}{Use%} > 90' - '{DF}{/da1}{Use%} > 90' 每一个监控对应一个配置文件,默认情况下有grep,http,sysinfo, test的配置 target: range表达式，描述监控的对象 interval: 监控的频率 code: 监控的插件 param: 监控插件的参数 管理 查看任务 root@feng-pc:/opt/mydan/dan/monitorv2/bin# ./control grep: started. http: stoped. sysinfo: started. test: stoped. 这里会显示监控的任务的状态，是启动的还是停止的 启动任务 root@feng-pc:/opt/mydan/dan/monitorv2/bin# ./control --start sysinfo 查看日志 root@feng-pc:/opt/mydan/dan/monitorv2/bin# ./control --tail sysinfo 'lijinfeng2011@gmail.com' ] }; email:private $VAR1 = { 'user' => [ 'lijinfeng2011@gmail.com' ], 'mesg' => { 'time' => '2018-12-15_16:31:23', 'name' => 'null', 'attr' => 'null', 'mesg' => 'name:null attr:null scale:(1/1) strategy: {CPU}{all}{%idle} > 1 node:localhost' }, 't' => 'email' }; analysis: done. batch: begin. batch: done. collector: begin. collector: done. analysis: begin. 停止任务 root@feng-pc:/opt/mydan/dan/monitorv2/bin# ./control --stop sysinfo Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"monitor/subscribe.html":{"url":"monitor/subscribe.html","title":"订阅管理","keywords":"","body":"订阅管理 上一节中，我们已经把监控任务启动起来了，监控管理只负责去做检查相关的事情，报警发生后，这些信息发送给谁，这是由订阅系统来控制的。 路径 /opt/mydan/dan/subscribe/bin 查看当前订阅 root@feng-pc:/opt/mydan/dan/subscribe/bin# ./subscribe name1|attr1|user1|1 name1|attr1|user1|1 name1|*|user1|1 *|*|lijinfeng|1 报警订阅内容分成了四个信息，分别表示如下 名称，对于监控来说，名称就是node管理中的cluster名称 分组，对于上一节显示的监控配置，分组对应的是cpu，disk,意思是把不同的监控进行了分类，方便不同的人订阅自己关系的内容 订阅人， 后续章节（报警接入）中会说明这个报警人的具体信息是怎么配置的 订阅的级别 关于订阅级别 root@feng-pc:~# cat /opt/mydan/dan/.config |grep notify -A 6 notify: level: 1: [ 'email' ] 2: [ 'sms' ] 3: [ 'sms', 'email' ] code: $ROOT/notify/code 在这个配置文件中进行配置，这里显示的意思为，1级发送邮件，2级发送短信，3级发送邮件和短信 订阅的添加和取消 root@feng-pc:/opt/mydan/dan/subscribe/bin# ./subscribe -? Usage: select [--name|--attr|--user|--level] $0 $0 --name name1 $0 --user user1 $0 --name name1 --user user1 insert $0 --add --name name1 --attr attr1 --user user1 --level 1 delete [--name|--attr|--user|--level] $0 $0 --del --name name1 $0 --del --user user1 $0 --del --name name1 --user user1 根据帮助操作即可 查看打到订阅系统的消息 root@feng-pc:/opt/mydan/dan/subscribe/bin# ./show 到这里为止，只有监控系统往订阅系统打消息 可以把发布系统的stuck消息也打到订阅系统，/opt/mydan/dan/bootstrap/bin# ./control -start watch2subscribe Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"monitor/oncall.html":{"url":"monitor/oncall.html","title":"值班管理","keywords":"","body":"值班管理 上一节讲的订阅系统，订阅人和报警接入有关，报警接入和值班系统有关系，这里先穿插讲一下值班系统，不需要轮班的可以跳过这一节。 路径 /opt/mydan/dan/oncall 编辑排版配置，一个班是一个配置文件 root@feng-pc:~# cat /opt/mydan/dan/oncall/conf/example --- site: cn pivot: 2017.06.10 queue: - user1 - user2 - user3 --- site: us pivot: 2017.06.11 20:00 timezone: America/Los_Angeles duration: '19:10 ~ 7:20' period: 7 level: [ 1, 2 ] day: [ 1, 2, 3, 4, 5 ] queue: - usr1 - usr2 - usr3 生成排版 root@feng-pc:/opt/mydan/dan/oncall/bin# ./make example 查看排班 root@feng-pc:/opt/mydan/dan/oncall/bin# ./list example Thu 00:00 2018-12-15 user1 user3 user2 Sun 00:00 2018-12-16 user2 user1 user3 Mon 00:00 2018-12-17 user3 user2 user1 Mon 11:10 2018-12-17 usr1 usr3 Mon 23:21 2018-12-17 user3 user2 Tue 00:00 2018-12-18 user1 user3 user2 Tue 11:10 2018-12-18 usr1 usr3 Tue 23:21 2018-12-18 user1 user3 Wed 00:00 2018-12-19 user2 user1 user3 Wed 11:10 2018-12-19 usr1 usr3 Wed 23:21 2018-12-19 user2 user1 Thu 00:00 2018-12-20 user3 user2 user1 Thu 11:10 2018-12-20 usr1 usr3 Thu 23:21 2018-12-20 user3 user2 Fri 00:00 2018-12-21 user1 user3 user2 排班配置好后可以直接在订阅系统和下一节的报警接入中使用，比如在订阅系统中给 example:1 这个用户订阅上报警，就会解析成example这个排班当前的第一值班人，找到值班人后再去找他对应的手机号码或者邮件地址 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"monitor/notify.html":{"url":"monitor/notify.html","title":"报警接入","keywords":"","body":"报警接入 配置 root@feng-pc:~# cat /opt/mydan/dan/.config |grep ^notify -A 5 notify: level: 1: [ 'email' ] 2: [ 'sms' ] 3: [ 'sms', 'email' ] code: $ROOT/notify/code 从报警的接入来看，当前分了3个级别，第一级发邮件，第二级发短信，第三极发邮件和短信。 平台是不认识也不识别短信还是邮件，email和sms这两个字符串对应的code下的插件名 编写邮件和短信插件 root@feng-pc:/opt/mydan/dan/notify/code# ls /opt/mydan/dan/notify/code email email.private sms email、sms如果需要发邮件和短信，就需要重新实现它 重写的插件，在mydan从新升级的时候可能会把您自己写的插件给覆盖了，为了避免这种问题，mydan中多个地方都可以通过添加 \".private\"后缀的方式来解决，比如email的插件名写成email.private，系统判断到有这个文件，就读取这个私有的插件，这样mydan更新是，就不会覆盖用户的插件。 配置人员信息 root@feng-pc:~# cat /opt/mydan/etc/util/conf/contact.private lijinfeng: email: lijinfeng2011@gmail.com sms: 133xxxxxxxx 这里的email和sms，需要和插件名称对上 root@feng-pc:～# cat /opt/mydan/etc/util/conf/team.private t1: [ 'user1', 'user2' ] t2: [ 'user3', 'user4' ] 组里一般是人的列表，也可以是另一个组，也可以是对应到上一个章节中的值班表 关于 值班人、组、人的关系理解 订阅系统可以给 值班人、组、人做订阅 name:level格式表示值班人, @teamname表示一个组，其他字符表示人 值班表中可以写组，例如某个排班的某个级别是一个组的信息 组中也可以是值班人，例如组A中包含 foo:1 和 bar:1,表示该组成员是当前foo排班表里面的第一值班人和bar值班表里面的第一值班人 这样就会有一个问题，如果组和值班人相互引用，会导致死循环，这里的解决逻辑是，只会往下找五层，如果解析出来的列表有不是人的格式，这部分直接被去掉 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"usage/access.html":{"url":"usage/access.html","title":"访问管理","keywords":"","body":"访问管理 在前面章节中说过，mydan的权限是通过公钥私钥对来完成的。密钥可以配置成自动更新。 如果需要把机器的权限分配给不同的人的，需要进行权限的管理，这时候可以通过这个章节的访问管理来解决。 dashboard sso Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"access/dashboard.html":{"url":"access/dashboard.html","title":"dashboard","keywords":"","body":"dashboard 安装 cd /opt/mydan/ && \\ git clone https://github.com/MYDan/dashboard.git && \\ /opt/mydan/perl/bin/perl Makefile.PL && \\ make && make install 配置 [root@feng-pc ~]# cat /opt/mydan/dashboard/config.yml appname: \"dashboard\" layout: \"main\" charset: \"UTF-8\" template: \"template_toolkit\" engines: template_toolkit: start_tag: '[%' end_tag: '%]' ssocallback: 'http://sso.mydan.org:8080/?ref=' ssologout: 'http://sso.mydan.org:8080/logout' cookiekey: 'sid' ssocallback: 未登录情况下跳转的sso地址 ssologout: sso登出链接 cookiekey: sso写的cookie的key名 启动 cp /opt/mydan/dashboard/bin/dashboard.web.5555 /opt/mydan/dan/bootstrap/exec/ 普通用户登录 用户通过web登录后，把自己的公钥匙在页面上保存 在用户机器上安装mydan 修改api指向dashboard地址，运行命令：mydan config api.addr=http://127.0.0.1:5555 修改mydan角色，运行命令：mydan config agent.role=client linux中的用户名和sso中的用户名不一致,可以添加环境变量 MYDan_username 指明sso中的名字。 export MYDan_username=foo 管理员权限管理 [root@feng-pc ~]# /opt/mydan/dashboard/tools/access -? Usage: $0 [--user username] [--add work||--del root] [--access 10.10.1.1] 用上面命令给用户分配权限 可以通过修改/opt/mydan/dashboard/code/access插件对接公司的权限系统 sso 相关 修改/opt/mydan/dashboard/code/sso 插件进行sso对接 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"access/sso.html":{"url":"access/sso.html","title":"sso","keywords":"","body":"sso 如果没有找到合适的或者没有开发有自己的sso，可以临时使用mydan的sso，github地址 https://github.com/MYDan/sso Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"usage/code.html":{"url":"usage/code.html","title":"仓库管理","keywords":"","body":"仓库管理 (gitlab&svn) 在一些情况下，可能需要代码仓库管理员管理多套git和svn。如果需要查询某个用户的权限项目和项目的归属人，或者停用某个用户，操作比较麻烦，仓库管理模块可以解决一些代码仓库管理的问题。 对git的管理是通过直接调用api。对于svn是通过修改管理机上的文件，然后提交到代码仓库，svn服务器定时同步最新，或者直接从管理机同步到svn服务器。 root@feng:# mydan code nofind config file:/opt/mydan/dan/code/config root@feng:# cp /opt/mydan/dan/code/config.example /opt/mydan/dan/code/config root@feng-pc:/opt/mydan/dan/code# mydan code --- - apiurl: http://gitlab.mydan.org/api/v4 name: git1 token: xxxxxxxxxxxxxxxx - apiurl: https://gitlab.mydan.com/api/v4 name: git2 token: xxxxxxxxxxxxxxxx - name: svn1 path: - /opt/mydan/dan/code/temp/svn1/*/*.txt SYNOPSIS $0 [--search user] $0 [--list] $0 [--block user] $0 [--unblock user] $0 [--name name] 解释 配置 不写任何参数的情况下，会打印出配置文件的信息和参数帮助 配置文件是一个yaml格式的文件，是一个数组，每个元素代表一个git或者svn，如果存在apiurl则表示是git，否则是svn token就是git中的private_token name 是给每个仓库起名，可以起一样的名字，在通过mydan code 操作时可以通过--name来指定只操作某个仓库 svn类型的配置文件中的path，使用匹配文件路径的方式和linux命令中的ls一样 参数 search: 搜索用户，一般是邮箱，比如lijinfeng2011@gmail.com,git可以通过用户名和邮箱搜索，svn只可以通过邮箱来搜索 list: 列出所有的用户，如果checkuser插件私有化定制了，会把仓库里面的处于active状态的用户查一遍用户状态（是否离职） block: 停用用户。对于svn来说，就是把svn对应的所有配置文件中该用户上加前缀 block__ , 重新启用时把前缀去掉 unblock：启用用户 例 搜索用户 root@feng:# mydan code --search lijinfeng2011@gmail.com [1]: lijinfeng2011@gmail.com git group http://gitlab.mydan.org/groups/mg1 lijinfeng2011@gmail.com [1]: lijinfeng2011@gmail.com git project.group http://gitlab.mydan.org/g2t/proj1 @ByGroup [2]: lijinfeng2011@gmail.com git project.group http://gitlab.mydan.org/g5g/Proj mydan1@gmail.com @GroupOwner [3]: lijinfeng2011@gmail.com git project.group http://gitlab.mydan.org/g5g/Pa mydan2@gmail.com @GroupOwner [4]: lijinfeng2011@gmail.com git project.user http://gitlab.mydan.org/lijinfeng2011/test_2 @Self [5]: lijinfeng2011@gmail.com git project.user http://gitlab.mydan.org/lijinfeng/test lijinfeng@gmail.com @ProjectOwner [6]: lijinfeng2011@gmail.com git project.user http://gitlab.mydan.org/user1/mm1 NoFind [7]: lijinfeng2011@gmail.com git project.group http://gitlab.mydan.org/grouptest1/mx1 @ByGroup [1]: lijinfeng2011@gmail.com svn group /opt/mydan/dan/code/temp/svn1/p1/AccessConfig.txt [groups] MYDan_G_T_1_rw [2]: lijinfeng2011@gmail.com svn project /opt/mydan/dan/code/temp/svn1/p1/AccessConfig.txt [/mydan/code/test] lijinfeng2011@gmail.com = rw [3]: MYDan_G_T_1_rw svn bygroup /opt/mydan/dan/code/temp/svn1/p1/AccessConfig.txt [/my/dan] @MYDan_G_T_1_rw = rw git中的项目归属通过以下顺序查找 @ByGroup 表示这个用户在这个组里面，以组权限为准 @GroupOwner 用户不在这个项目组里面，如果这个项目是属于某个组的，找这个组的owner @Self 这个项目就是这个用户自己的 @ProjectOwner 找这个项目的owner NoFind 什么都没有匹配上 获取用户列表 root@feng:# mydan code --list [1]: git mydan1@gmail.com active [2]: git mydan2@gmail.com block [3]: git mydan3@gmail.com active [4]: git mydan4@gmail.com active [1]: svn mydan1@gmail.com active 停用用户 root@feng:# mydan code --block lijinfeng2011@gmail.com git lock user.email=lijinfeng2011@gmail.com user.id=123 启用用户 root@feng:# mydan code --unblock lijinfeng2011@gmail.com git unlock user.email=lijinfeng2011@gmail.com user.id=123 指定仓库执行 root@feng:# mydan code --name svn --search lijinfeng2011@gmail.com [1]: lijinfeng2011@gmail.com svn group /opt/mydan/dan/code/temp/svn1/p1/AccessConfig.txt [groups] MYDan_G_T_1_rw [2]: lijinfeng2011@gmail.com svn project /opt/mydan/dan/code/temp/svn1/p1/AccessConfig.txt [/mydan/code/test] lijinfeng2011@gmail.com = rw [3]: MYDan_G_T_1_rw svn bygroup /opt/mydan/dan/code/temp/svn1/p1/AccessConfig.txt [/my/dan] @MYDan_G_T_1_rw = rw 仓库名可以重名 其他 查看：checkuser 需要实现自己的插件/opt/mydan/dan/code/plugin/checkuser.private 如果没有定义自己的插件则跳过 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"philosophy/":{"url":"philosophy/","title":"设计理念","keywords":"","body":"mydan使用手册 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/":{"url":"tools/","title":"工具详解","keywords":"","body":"工具详解 以下对下面命令做详细解释 [root@10-60-79-144 code]# mydan Usage: mydan COMMAND [arg...] Options: --dan Switch to `dan` first. --box Switch to `box` first. Help show detail Commands: * go 登陆服务器. * range 操作对象描述. * whois 查询、模糊查询机器信息. * gateway 代理. * rcall 远程调用mydan的agent. * rtail tail多个远程机器日志. * vssh 虚拟登陆多个机器. * mssh 批量ssh命令. * mcmd 批量命令. * load 从远程机器下载文件. * rsync 同步文件. * mrsync 批量同步文件. * grsync 全局批量同步文件，可以在多个隔离的网络中通过代理同步. * access 给远程机器添加用户. * keys 给运程机器添加key信任. * config mydan配置. * shell 获取远程机器反弹shell. * shellv2 获取远程机器反弹shell的v2版本. * alias mydan内部使用的alias. * unalias mydan内部使用的unalias. * sync 同步mydan的配置 * xtar 脚本和数据压缩工具. * git git命令，添加了指定key功能. * alarm 设置超时闹钟运行命令. * bigest 查找大文件. * expect 自动应答. * release 发布mydan. * supervisor 守护方式启动进程. * tai64nlocal 查看tai64格式日志. * diagnosis 系统诊断. * tcpserver 脚本提供tcp服务. * deploy 本地发布切连接小工具. * check 检查服务的小工具. * secure 私密文件管理小工具. * diskSpaceControl 控制磁盘使用空间在某个百分比. * node 机器管理. * reborn 重装系统. * os 获取当前服务器的cpu/mem等信息. Run 'mydan COMMAND --help' for more information on a command. 可以通过mydan --dan 和 mydan --box进行切换 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/go.html":{"url":"tools/go.html","title":"go","keywords":"","body":"mydan go [root@feng-pc ~]# mydan go SYNOPSIS $0 host [user] $0 --user dan host [user] 这个命令用于快捷登录机器 mydan g 和 mydan go 两个命令等同 配置文件1 root@feng-pc:~# cat /opt/mydan/etc/util/conf/pass #localhost{1~100}: # user1: \"passwd1\" # user2: \"passwd2\" #node1: # uu: pp # default: ppp #default: # u1: p1 # default: p 登录方式: mydan go foo ， 其中foo为机器名、ip，或者是node管理中的机器列表的部分内容 用于登录node管理中的机器，或者指定机器名或者ip 可以把配置文件改名成 /opt/mydan/etc/util/conf/pass.private避免更新mydan后被覆盖 配置文件2 root@feng-pc:~# cat /opt/mydan/etc/util/conf/go --- lijinfeng:mydan-slave: expect: assword: $ENV{PASSWD} code: googlecode:$ENV{TOKEN} go: ssh lijinfeng2011@gmail.com@op.mydan.org -t \"ssh -t -i ~/key work@{} sudo su - root\" range: mydan-slave-{1,2} lijinfeng:mydan-test: expect: assword: $ENV{PASSWD} code: googlecode:$ENV{TOKEN} go: ssh lijinfeng2011@gmail.com@op.mydan.org -t \"ssh -t -i ~/key work@{} sudo su - root\" range: mydan-test-0{1,2} 登录方式: mydan go /foo ， 其中foo是配置文件中的key 可以把配置文件名改名成/opt/mydan/etc/util/conf/go.private，避免mydan更新后被覆盖 配置文件中可以通过 $ENV{ABC}的方式在配置文件中使用变量 googlecode 为googlecode 验证 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/range.html":{"url":"tools/range.html","title":"range","keywords":"","body":"mydan range range表达式，是一个操作对象描述的一种方式，支持多种格式的表达 范围 root@feng-pc:~# mydan range 'mydan-{1,2,6~9}' -l mydan-6 mydan-1 mydan-9 mydan-8 mydan-7 mydan-2 获取集群机器 root@feng-pc:~# mydan range '{==project1==*??==*}' 127.0.0.1,localhost 获取node机器管理中的操作对象，node中的数据分层了四层，第一层是cluster，第二层是属性，比如机房，模块， 第三层是操作对象，比如机器，第四层是编号或者状态，建议第四层用来做状态，这样监控系统可以屏蔽报警或者发布系统可以不发布屏蔽掉故障的的机器 mydan range '{??======*}'获取集群列表 通过插件获取列表 通过list插件获取列表 mydan range '{%%list==a}' #获取当前目录下a.list 文件中的列表 mydan range '{%%list==a,b}' #获取a.list 和b.list的机器列表 mydan range '{%%list}' ,获取所有以 .list文件为后缀的机器列表 要读取的\".list\"后缀的文件要在当前的操作路径下才能读取 所有的\".list\"文件必须不能有格式错误，否则会让range加载失败，因为range会把当前目录下所有\".list\"文件都加载进来 通过node插件获取列表 mydan range '{%%node}' #获取机器管理中全部机器 表达式 加法 mydan range 'mydan-test-{1~3},foo-{10~20},localhost' 用逗号分隔，把操作对象叠加在一起 减法 mydan range 'mydan-test-{1~3},-localhost' 用减号去掉不需要的对象 叠加 root@feng-pc:~# mydan range 'AA-{1~2}-{1~2}' -l AA-2-1 AA-1-2 AA-2-2 AA-1-1 过滤出 root@feng-pc:~# mydan range 'AA-{1~20},&/2/' -l AA-20 AA-2 AA-12 过滤出符合条件的列表 过滤掉 root@feng-pc:~# mydan range 'AA-{1~20},^/2/' AA-{1,3~11,13~19} 过滤掉符合条件的列表 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/whois.html":{"url":"tools/whois.html","title":"whois","keywords":"","body":"mydan whois root@feng-pc:~# mydan whois localhost cluster: project idc1 127.0.0.1 1 project1 idc1 127.0.0.1 1 project1 idc1 localhost 1 project1 idc2 127.0.0.1 1 hosts: localhost 127.0.0.1 localhost.localdomain 127.0.0.1 localhost4 127.0.0.1 localhost4.localdomain4 127.0.0.1 test123.mydan.org 127.0.0.1 查询某个资源在哪个集群中 mydan whois 和 mydan w 两个命令等同 如果细心看，发现这个命令的输出包含两个信息，一个是cluster一个是host。cluster 就是机器管理中的内容，host是/opt/mydan/etc/hosts文件中记录的内容，这个文件和/etc/hosts 文件的格式一致，配置了这个文件，在mydan中可以直接使用里面的机器名来调用。如果一个机器有多个ip,多个机器名，可以用 n\\d*-hostname 来配置内网地址，用w\\d*-hostname 来配置外网地址，这种情况下用mydan whois查询任何一个ip或者机器名，命令会返回这个机器所有的信息 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/gateway.html":{"url":"tools/gateway.html","title":"gateway","keywords":"","body":"mydan gateway root@feng-pc:～# mydan gateway -? Usage: $0 $0 on | off $0 on abc $0 off foo bar $0 restart | oo # oo and restart are the same, oo == off on $0 --help 配置 root@feng-pc:~# cat /opt/mydan/etc/util/conf/gateway pek: go: 'ssh -qTNf -D 127.0.0.1:12345 $ENV{MYUSERNAME}@gw1.mydan.org' expect: code: 'googlecode:$ENV{TOKEN_N}' assword: $ENV{PASSWD} aws: go: 'ssh -qTNf -D 127.0.0.1:12346 $ENV{MYUSERNAME}@gw2.mydan.org' expect: code: 'googlecode:$ENV{TOKEN_W}' assword: $ENV{PASSWD} ssh代理，把跳板机，或者把其他区域的网络出口代理管理起来，方便mydan go工具做登录操作 mydan go 中的ssh命令可以配置成 ssh -o ProxyCommand='nc -x 127.0.0.1:1080 %h %p' username@server的方式来使用该代理 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/rcall.html":{"url":"tools/rcall.html","title":"rcall","keywords":"","body":"mydan rcall root@feng-pc:~# mydan rcall SYNOPSIS $0 -r range [--sudo sudoer ] [--verbose] cmd .. [--user username (default `id -un`)] [--timeout seconds (default 60)] [--max number ( default 128 )] [--port number ( default from .config )] [--env \"A=123;B=abc\" ] [--version] [--secret \"x=1;xx=2\" ] [--immediately] [--addr 10.10.10.10] [--listen 9999] 远程调用mydan中agent插件的命令 命令行参数 sudo 调用插件使用的用户，默认不sudo的情况下，用的是agent启动时的用户 verbose 如果指定这个参数，输出格式会变化成 node:output,方便文本处理 user 操作用户 timeout 默认60秒 max 并发数，默认128,如果操作使用了区域代理，并发数会变大，每个区域单独使用该并发数 port agent的端口，默认在配置文件中读取为65111 env 远程机器会先设置这临时些环境变量再执行对应的插件 version返回结构内包含远程机器mydan的版本 secret 传递秘密字段，远程机器日志中不显示该字段，sexec和chpasswd插件会用到 immediately 实时查看调用插件的输出内容，这个要看插件的实现是否有这个功能，目前scriptsx插件有这个功能 addr 如果使用了immediately参数，addr参数用来控制日志内容连接到的ip地址，默认是客户中获取到的远程机器的ip。如果存在代理的情况，请指定成控制机的外网ip listen, 和addr参数类似，如果使用immediately参数的情况下指定的收取实时日志的端口。默认情况下在控制机上65112～65535的端口内找一个没在使用的 例 root@feng-pc:~# mydan rcall -r 127.0.0.1 exec w run .. 100% 1/1 ############################## RESULT ############################## ==================================================================== 127.0.0.1[1]: 16:06:50 up 5 days, 29 min, 10 users, load average: 0.35, 0.46, 0.43 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT feng tty7 :0 二11 4days 40.01s 37.19s /sbin/upstart --user ==================================================================== 插件 路径 /opt/mydan/dan/agent/code/ access 添加删除用户,工具mydan access中有介绍 apps 解析应用操作，在应用操作中有过介绍 call [root@feng-pc]# mydan rcall -r 127.0.0.1 call 'echo abc' 'echo 123' run .. 100% 1/1 ############################## RESULT ############################## ==================================================================== 127.0.0.1[1]: call[1]: [echo abc] abc call[2]: [echo 123] 123 ==================================================================== 调用命令,可以调用多个命令. 多个命令在exec插件中也可以调用（如 mydan rcal -r host exec 'echo abc && echo 123'），call和exec有一些差别，call用的是system命令来调用，exec用的是exec命令调用，exec插件在调用过程中如果控制端ctrl+C停止掉，远程对应调用的命令如果没有执行完成，会被强制退出。call插件则不会. 如果exec插件调用的多个命令，也会导致ctrl+C的时候进程不退出，因为信号是发给父进程 check check 检查项目，在应用操作中有过介绍 chpasswd [root@feng-pc]# mydan rcall --verbose -r 127.0.0.1 chpasswd user1 user2 user3 --secret PASSWD=20AWjLFwBOHlra5M run .. 100% 1/1 127.0.0.1:user1:20AWjLFwBOHlra5M 127.0.0.1:user2:20AWjLFwBOHlra5M [root@feng-pc]# mydan rcall --verbose -r 127.0.0.1 chpasswd user1 user2 user3 127.0.0.1:user1:J4Lx2MFVwUUW0se7 127.0.0.1:user2:PmV2ist69IfzXCmO chpasswd 修改密码 可以指定密码也可以不指定，不指定情况下随机生成 使用--verbose 参数，当操作多机器多用户的时候，输出格式比较统一 如果远程机器没有对应的用户，则跳过 collector collector 采集mydan collector收集到的数据 deploy deploy 发布插件，在应用操作中有过介绍 download download 下载文件的插件 dump [root@feng-pc]# mydan rcall -r 127.0.0.1 dump file1 --path /tmp/file2 --chmod 777 --chown work run .. 100% 1/1 ############################## RESULT ############################## ==================================================================== 127.0.0.1[1]: ok ==================================================================== [root@10-60-79-144 tools]# mydan rcall -r 127.0.0.1 exec 'ls -l /tmp/file2' run .. 100% 1/1 ############################## RESULT ############################## ==================================================================== 127.0.0.1[1]: -rwxrwxrwx 1 work work 23 Dec 17 17:16 /tmp/file2 ==================================================================== --path 目标文件绝对路径，如果不写则和源文件路径一致 把文件dump到远程机器, --chmod 会改变文件权限(默认由远程机器agent启动时的umask决定)， --chown 改变文件归属(默认为远程机器启动的用户) 可以添加参数 --cc 表示继承源文件的属性， 如果指定chmod或者chown 则属性由chmod和chown决定 edump edump 普通dump，不适合dump大文件,逻辑简单 sdump sdump secret dump，不适合dump大文件 exec [root@feng-pc]# mydan rcall -r 127.0.0.1 exec 'date && echo ok' run .. 100% 1/1 ############################## RESULT ############################## ==================================================================== 127.0.0.1[1]: Mon Dec 16 17:14:54 CST 2018 ok ==================================================================== exec 执行命令 sexec [root@feng-pc]# mydan rcall -r 127.0.0.1 exec 'echo xxx__FOO' run .. 100% 1/1 ############################## RESULT ############################## ==================================================================== 127.0.0.1[1]: xxx__FOO ==================================================================== [root@feng-pc]# mydan rcall -r 127.0.0.1 sexec 'echo xxx__FOO' --secret \"FOO=123\" run .. 100% 1/1 ############################## RESULT ############################## ==================================================================== 127.0.0.1[1]: xxx123 ==================================================================== sexec secret exec,功能和exec一样是执行命令，区别是它会替换 --secret 指定的变量，而且这个变量在远程机器上的日志是不显示的，如chpasswd插件也用了这个方式 filelist filelist 获取文件列表，grsync插件会用到 grep grep 监控系统用的日志监控插件 load load load文件 mrsync mrsync 代理上运行的mrsync插件，不手动调用 proxy proxy 代理插件，一般不手动调用 reborn reborn 远程重装系统 scripts [root@feng-pc]# cat start.sh #!/bin/bash echo start [root@feng-pc]# mydan rcall -r 127.0.0.1 scripts start.sh run .. 100% 1/1 ############################## RESULT ############################## ==================================================================== 127.0.0.1[1]: start ==================================================================== 调用控制机上的脚本，会把脚本的内容传到远程去执行 scriptsx 和scripts功能类似，不过多了实时查看脚本标准输出的功能 shell shell 远程shell,工具mydan shell中有介绍 show [root@feng-pc]# ./rcall -r 127.0.0.1 show a b c run .. 100% 1/1 ############################## RESULT ############################## ==================================================================== 127.0.0.1[1]: --- argv: - a - b - c code: show sudo: ~ user: root ==================================================================== show 显示参数，用于调试,可以看出插件获取到的数据结构 sysinfo root@feng-pc# mydan rcall -r 127.0.0.1 sysinfo '{CPU}{all}{%idle} > 10' run .. 100% 1/1 ############################## RESULT ############################## ==================================================================== 127.0.0.1[1]: --- temp###{CPU}{all}{%idle} > 10: '67.68' ==================================================================== root@feng-pc# mydan rcall -r 127.0.0.1 sysinfo '{CPU}{all}{%idle} sysinfo 基础监控的插件,一般情况下不手动执行 tail2tcp tail2tcp rtail工具使用的插件,工具mydan rtail就是用的这个插件 version [root@feng-pc]# ./rcall -r 127.0.0.1 version run .. 100% 1/1 ############################## RESULT ############################## ==================================================================== 127.0.0.1[1]: runtime version:001053 file version:001053 ==================================================================== version 获取mydan的版本,runtime 表示agent启动的版本，file表示本地文件更新到的版本，如果两个版本不一样，说明更新mydan后agent没有重启 zipdir grsync 用于压缩目录的插件 unzipdir grsync 用于解压目录的插件 cleandir grsync 用于清理临时文件的插件 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/rtail.html":{"url":"tools/rtail.html","title":"rtail","keywords":"","body":"mydan rtail root@feng-pc:~# mydan rtail SYNOPSIS $0 --range range /file/1 /file/2 $0 --range range #default filelist in remote /etc/mydan.file tail file from remote machine $0 --range range --listen 9999 $0 --range range --listen 9999 [--addr 10.10.10.1]\\ [--user user(default `id -un`)] [--sudo sudoer] --seek T0 (defaule) || --seek H0 || --seek T1024 获取远程机器的实时日志.\b\bmydan中的mydan rcall可以批量调用命令，但是这个必须等命令\b\b执行结束才能返回，所以使用不了\btail -f foo这种类型的\b远程调用，mydan中的mydan shell可以\b获取远程机器的shell，可以\b交互式的\b操作机器，当然也可以\b执行tail -f foo，但是这个命令一次只能针对一台机器，所以如果你需要\b实时的获取多个机器的远程日志，这个时候就需要用到mydan rtail 参数 range 操作对象 listen \b\b监听端口，如果不指定，会在65112-65535端口\b中找一个没在使用的端口 addr \b\b远程机器日志输出到的tcp的ip地址 \b例 原理 \bmydan rtail会\b其中的时候会\b启动一个\b随机的端口 通过mydan rcall功能\b\b去远程打开文件，并把输出流直到中控机中rtail\b开启的端口， mydan rcall退出 \b中控机器\b\b获取和显示远程日志，如果中控机的rtail命令退出后，\b远程的采集日志的进程\b也一\b并退出 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/vssh.html":{"url":"tools/vssh.html","title":"vssh","keywords":"","body":"mydan vssh root@feng-pc:~# mydan vssh SYNOPSIS $0 [--range host] [--user foo] [--sudo sudoer ] [--timeout seconds (default 500)] [--max number (default 128)] \\ 虚拟的ssh，同时操作多个机器 参数 range 操作对象 user 操作用户，默认是当前操作用户,这个用户只和远程日志有关，表面是哪个用户调用的，真正执行的用户要用sudo来指定 sudo 需要sudo到哪个用户下 timeout 操作超时时间 max 并发数，和rcall一样，如果是多个区域，这个并发在区域内生效，也就是如果你同时操作多个区域，每一个区域都是这样的并发数 例 root@feng-pc:~# mydan vssh -r 'localhost,127.0.0.1' _ __ _____| | ___ ___ _ __ ___ ___ \\ \\ /\\ / / _ \\ |/ __/ _ \\| '_ ` _ \\ / _ \\ V V / __/ | (_| (_) | | | | | | __/ \\_/\\_/ \\___|_|\\___\\___/|_| |_| |_|\\___| root (2)sh#echo ok run .. 100% 2/2 ############################## RESULT ############################## ==================================================================== 127.0.0.1,localhost[2]: ok ==================================================================== root (2)sh# 每一次执行命令都是一次远程调用，所以不支持cd，vim等命令 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/mssh.html":{"url":"tools/mssh.html","title":"mssh","keywords":"","body":"mydan mssh root@feng-pc:~# mydan mssh SYNOPSIS $0 -r range [--sudo sudoer] [--noop][--verbose] cmd .. [--user user (default `id -un`)] [--timeout seconds (default 500)] [--max number (default 128)] \\ 批量的ssh命令 参数 range 操作的机器 sudo 要sudo到哪个用户执行 noop 只是把要执行的命令显示出来，不去执行，调试用 verbose 显示详细,按照机器节点输出文本格式，方便文本处理 user 执行的用户,也就是ssh -l 命令指定的用户 timeout 超时时间，单位秒 并发数 配置 路径 /opt/mydan/etc/util/conf/pass 为了防止更新mydan的时候配置文件被覆盖，可以把配置文件放在 /opt/mydan/etc/util/conf/pass.private 内容 root@feng-pc:~# cat /opt/mydan/etc/util/conf/pass.private #localhost{1~100}: # user1: \"passwd1\" # user2: \"passwd2\" #node1: # uu: pp # default: ppp #default: # u1: p1 # default: p # 10.10.10.144: root: KqwdblFQZD6TSVML 10.10.10.145: root: XnAYuEq4zCO8ULHi default 表示缺省的，可以对所有机器配置上缺省密码，可以给部分机器设置缺省的密码 例子 root@feng-pc:/opt/mydan/dan/tools# mydan mssh -r '10.10.10.{144,145}' 'hostname' run .. 100% 2/2 ############################## RESULT ############################## ==================================================================== 10.10.10.144[1]: 10-10-10-144 ==================================================================== 10.10.10.145[1]: 10-10-10-145 ==================================================================== root@feng-pc:/opt/mydan/dan/tools# mydan mssh --verbose -r '10.10.10.{144,145}' 'hostname' 10.10.10.144:10-10-10-144 10.10.10.145:10-10-10-145 您在 /var/mail/root 中有新邮件 root@feng-pc:/opt/mydan/dan/tools# mydan mssh -r '10.10.10.{144,145}' 'hostname' --noop /usr/bin/ssh -o StrictHostKeyChecking=no -o NumberOfPasswordPrompts=1 -t -l root 10.10.10.144 hostname\\; /usr/bin/ssh -o StrictHostKeyChecking=no -o NumberOfPasswordPrompts=1 -t -l root 10.10.10.145 hostname\\; Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/mcmd.html":{"url":"tools/mcmd.html","title":"mcmd","keywords":"","body":"mydan mcmd root@feng-pc:~# mydan mcmd SYNOPSIS $0 -r range [--noop] [--verbose] cmd .. [--timeout seconds (default 300) ] [--max number (default 128) ] [--interchange (default {})] [--xx] echo \"input\" |$0 -r range cmd 批量执行命令 参数 range 操作对象 noop 不执行，只显示真正运行的命令,用于调试 verbose 文本输出，方便文本处理 timeout 超时，单位秒 interchange 替换符号，默认为{} xx 输出结果，把包涵操作对象的字符串替换为 interchange 指定的替换符 例子 常规 root@feng-pc:# mydan mcmd -r '10.10.10.{144,145}' 'echo foo.{}' 10.10.10.144 started. 10.10.10.145 started. 10.10.10.144 done. 10.10.10.145 done. ############################## RESULT ############################## ==================================================================== 10.10.10.145[1]: foo.10.10.10.145 ==================================================================== 10.10.10.144[1]: foo.10.10.10.144 ==================================================================== noop root@feng-pc:# mydan mcmd -r '10.10.10.{144,145}' --noop 'echo foo.{}' echo foo.10.10.10.145 echo foo.10.10.10.144 verbose root@feng-pc:# mydan mcmd -r '10.10.10.{144,145}' --verbose 'echo foo.{}' 10.10.10.144:foo.10.10.10.144 10.10.10.145:foo.10.10.10.145 interchange root@feng-pc:# mydan mcmd -r '10.10.10.{144,145}' --interchange '\\[\\]' 'echo foo.[]' 10.10.10.144 started. 10.10.10.145 started. 10.10.10.144 done. 10.10.10.145 done. ############################## RESULT ############################## ==================================================================== 10.10.10.145[1]: foo.10.10.10.145 ==================================================================== 10.10.10.144[1]: foo.10.10.10.144 ==================================================================== root@feng-pc:# mydan mcmd -r '10.10.10.{144,145}' --interchange 'ABC' 'echo foo.ABC' 10.10.10.145 started. 10.10.10.144 started. 10.10.10.145 done. 10.10.10.144 done. ############################## RESULT ############################## ==================================================================== 10.10.10.144[1]: foo.10.10.10.144 ==================================================================== 10.10.10.145[1]: foo.10.10.10.145 ==================================================================== 有时候你写的命令中有默认的替换符“{}”，这个时候可能和mcmd的产生了冲突，可以指定一个新的替换符号 xx root@feng-pc:~# mydan mcmd -r '10.10.10.{144,145}' --xx 'echo foo.{}' 10.10.10.145 started. 10.10.10.144 started. 10.10.10.145 done. 10.10.10.144 done. ############################## RESULT ############################## ==================================================================== 10.10.10.{144~145}[2]: foo.{} ==================================================================== 在某些情况下，你需要把输出的内容进来的聚合分类，这个时候就需要这个参数 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/load.html":{"url":"tools/load.html","title":"load","keywords":"","body":"mydan load root@feng-pc:~# mydan load SYNOPSIS $0 -host host [--sp srcfile] [--verbose] [--dp dstfile (default sp )] [--sudo sudoer ] [--user username (default `id -un`)] [--timeout seconds (default 500)] [--continue] [--chown root] [--chmod 777] [--cc] 从远程机器下载文件 参数 host 指定下载的机器 sp 指定源路径地址 verbose 显示现在百分比 dp 指定下载到本地的路径，如果不指定，和sp路径一致 sudo 指定执行这个操作的用户 user 执行用户名，显示在远程机器的日志中 timeout 超时，单位秒 continue 续传 chown 目标文件的属主 chmod 目标文件的权限 cc 继承远程文件的属主和文件权限，如果指定chown或chmod，以指定的为准 例 root@feng-pc:# mydan load -h 127.0.0.1 --sp /opt/mydan/dan/tools/range --dp /tmp/range position: 0 Load .. 100% 1352/1345 Load .. 100% 2697/1345 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/rsync.html":{"url":"tools/rsync.html","title":"rsync","keywords":"","body":"mydan rsync root@feng-pc:~# mydan rsync SYNOPSIS $0 -aP /tmp/foo user@host:/tmp/bar 可以通过应答方式用ssh协议同步文件 结合gateway可以方便把文件同步到任何地方 例 root@feng-pc:/opt/mydan/dan/tools# mydan rsync -aP /tmp/foo root@10.10.10.144:/tmp/bar root@10.10.10.144's password: sending incremental file list foo 43 100% 0.00kB/s 0:00:00 (xfr#1, to-chk=0/1) 配置 密码配置文件和mydan mssh中使用的配置文件一样 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/mrsync.html":{"url":"tools/mrsync.html","title":"mrsync","keywords":"","body":"mydan mrsync root@feng-pc:~# mydan mrsync SYNOPSIS $0 [--src src-range(default `hostname`)] --dst dst-range --sp src-path [--dp dst-path] \\ [--timeout seconds(default 300)] [--max number(default 128)] [--retry number(default 2)] [--gave number(default 3)] [--user username(default `id -un`)] [--sudo user1 ] [--chown root] [--chmod 777] [--cc] -1 Forces mrsync to try protocol version 1 -2 Forces mrsync to try protocol version 2 ssh协议和mydan协议都支持mrsync工具，通过mydan --dan 和mydan --box 来切换协议 mrsync工具不支持多区域之间的同步，如果是要同步多个隔离的区域，请用 mydan grsync 工具 如果使用的是ssh协议，要操作的机器之间需要ssh key，这些机器之间不需要密码，可以使用mydan keys命令来把ssh key下发到所有机器 协议 dan root@feng-pc:# mydan --dan Switch to `dan` first. root@feng-pc:# mydan mrsync SYNOPSIS $0 [--src src-range(default `hostname`)] --dst dst-range --sp src-path [--dp dst-path] \\ [--timeout seconds(default 300)] [--max number(default 128)] [--retry number(default 2)] [--gave number(default 3)] [--user username(default `id -un`)] [--sudo user1 ] [--chown root] [--chmod 777] [--cc] -1 Forces mrsync to try protocol version 1 -2 Forces mrsync to try protocol version 2 参数 src 源机器，可以是多个机器，不指定时默认是本机 dst 目标机器，可以是多个 sp 源路径 dp 目标路径，如果不指定，和源路径一致 timeout 超时，单位秒 max 并发数 retry 重试次数，默认失败后重试两次 gave 一个源一次可以提供给多少个机器来拉取数据，默认是3个 user 这个用户只是用于打日志，真正的用户用sudo指定 sudo sudo的用户，真正执行的用户 chown 文件属主 chmod 文件权限 cc 继承源文件属主和文件权限，如果指定了chown或chmod，以指定的为准 box root@feng-pc:# mydan --box Switch to `box` first. 您在 /var/mail/root 中有新邮件 root@feng-pc:# mydan mrsync SYNOPSIS $0 [--src src-range(default `hostname`)] --dst dst-range --sp src-path [--dp dst-path] \\ [--timeout seconds(default 300)] [--max number(default 128)] [--retry number(default 2)] [--gave number(default 3)] [--nice number] [rsync options] 参数 src 源机器，可以是多个机器，不指定时默认是本机 dst 目标机器，可以是多个 sp 源路径 dp 目标路径，如果不指定，和源路径一致 timeout 超时，单位秒 max 并发数 retry 重试次数，默认失败后重试两次 gave 一个源一次可以提供给多少个机器来拉取数据，默认是3个 nice nice级别 rsync options, rsync的其他参数 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/grsync.html":{"url":"tools/grsync.html","title":"grsync","keywords":"","body":"mydan grsync root@feng-pc:~# mydan grsync SYNOPSIS $0 [--src src-range(default `hostname`)] --dst dst-range --sp src-path [--dp dst-path] \\ [--timeout seconds(default 300)] [--max number(default 128)] [--retry number(default 2)] [--gave number(default 3)] [--user username(default `id -un`)] [--sudo user1 ] [--chown root] [--chmod 777] [--cc] [--delete] -1 Forces grsync to try protocol version 1 -2 Forces grsync to try protocol version 2 -3 Forces grsync to try protocol version 3 -4 Forces grsync to try protocol version 4 --sp /path/file --dp /path/foo/newfile --sp /path/file --dp /path/foo/ --sp /path/ --dp /path/foo/ --sp /path/foo* --dp /path/foo/ --sp '/path/file1;/path/file2' --dp /path/foo/ [--immediately] [--addr 10.10.10.10] [--listen 9999] 全局同步文件 同步目录时，目录下所有小于1M的文件会被压缩后传输。同步目录只处理三种类型的数据，1.目录、2.文件、3.软链接 。如果目录中有其他类型的文件则不同步和处理。如果加了--delete参数，目标目录中有其他类型的数据会同步失败 同步文件如果大于5G则使用简单md5验证。详情查看 fastmd5 参数 src 源机器，默认是本机 dst 目标机器 sp 源路径 dp 目标路径，默认是sp timeout 超时，单位秒 max 并发数，如果是同时操作多个区域，这个并发数在不同的版本中体现的不一样，一般情况下比你设置的要大 retry 失败后重试的次数，默认重试两次 gave 一个源同时可以给多少个机器提供数据 user 执行的用户，这个信息显示在远程机器的日志中，真正的执行用户用sudo指定 sudo 真正的执行用户 chown 文件属主 chmod 文件权限 cc 继承源文件的属性，如果指定了chown或chmod，以指定的为准 delete 同步目录时这个参数会把目标目录上有，而源目录中没有的数据删掉，类似rsync工具的--delete immediately 实时查看调用插件的输出内容，这个要看插件的实现是否有这个功能，目前scriptsx插件有这个功能 addr 如果使用了immediately参数，addr参数用来控制日志内容连接到的ip地址，默认是客户中获取到的远程机器的ip。如果存在代理的情况，请指定成控制机的外网ip listen, 和addr参数类似，如果使用immediately参数的情况下指定的收取实时日志的端口。默认情况下在控制机上65112～65535的端口内找一个没在使用的 协议版本，使用默认值即可 sp和dp详解 --sp /path/file --dp /path/foo/newfile;源文件名是 /path/file,目标文件名为/path/foo/newfile --sp /path/file --dp /path/foo/; 源文件名为/path/file; 目标文件名为/path/foo/file --sp /path/ --dp /path/foo/; 把源目录下/path/下的文件同步到目标路径/path/foo/下 /path/foo --dp /path/foo/; 把匹配/path/foo 的文件同步到目标路径/path/foo/下 -sp '/path/file1;/path/file2' --dp /path/foo/; 把指定的文件用“;”分隔，把文件同步到目标路径下 例 feng@feng-pc:~$ mydan grsync --src '127.0.0.1' --dst '127.0.0.1' --sp /tmp/file1 --dp /tmp/file2 ------------------------------------------------------------ sp:/tmp/file1 => dp:/tmp/file2 127.0.0.1 => 127.0.0.1: RSYNC 127.0.0.1 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/access.html":{"url":"tools/access.html","title":"access","keywords":"","body":"mydan access root@feng-pc:~# mydan access SYNOPSIS $0 -r range [--delete] [--add] users1 user2 .. Add or delete some users on the remote machine Only root users can execute 给远程机器添加或者删除账号 修改/etc/{passwd,shadow,group,sudoers}这四个文件,修改规则是qr/^$user\\b/,添加用户时把控制机上的这四个文件匹配到的用户内容提取出来，写到远程机器上， 删除时在远程机器上找到匹配的内容进行删除 添加用户时会创建家目录，删除用户时不删除家目录 例 [root@feng-pc]# mydan access -r '10.10.10.{1,2}' --add user1 --- 10.10.10.1: \"ok\\n--- 0\\n\" 10.10.10.2: \"ok\\n--- 0\\n\" [root@feng-pc]# mydan access -r '10.10.10.{1,2}' --delete user1 --- 10.10.10.1: \"ok\\n--- 0\\n\" 10.10.10.2: \"ok\\n--- 0\\n\" 删除的时候不会删除家目录 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/keys.html":{"url":"tools/keys.html","title":"keys","keywords":"","body":"mydan keys root@feng-pc:~# mydan keys -? Usage: $0 -r range user1 user2 .. Synchronize keys( id_rsa id_rsa.pub id_dsa id_dsa.pub authorized_keys ) to remote machines Only root users can execute 给远程机器添加ssh key Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/config.html":{"url":"tools/config.html","title":"config","keywords":"","body":"mydan config root@feng-pc:~# mydan config -? Usage: $0 $0 foo.bar=123 $0 foo.bar --del $0 [--raw] 读取、修改 mydan的配置 例 root@feng-pc:# mydan config agent --- argv: /opt/mydan/dan/agent/argv auth: /opt/mydan/etc/agent/auth conf: /opt/mydan/dan/agent/conf lib: /opt/mydan/dan/agent/lib path: /opt/mydan/dan/agent/path port: 65111 proxy: /opt/mydan/etc/agent/proxy role: agent root@feng-pc:# mydan config agent.port=65123 root@feng-pc:# mydan config agent --- argv: /opt/mydan/dan/agent/argv auth: /opt/mydan/etc/agent/auth conf: /opt/mydan/dan/agent/conf lib: /opt/mydan/dan/agent/lib path: /opt/mydan/dan/agent/path port: '65123' proxy: /opt/mydan/etc/agent/proxy role: agent Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/shell.html":{"url":"tools/shell.html","title":"shell","keywords":"","body":"mydan shell root@feng-pc:~# mydan shell SYNOPSIS $0 --host host get a shell from remote machine $0 --host host --listen 9999 $0 --host host --listen 9999 [--addr 10.10.10.1]\\ [--user user(default `id -un`)] [--sudo sudoer] 获取远程shell 参数 host 要操作的机器 sudo 获取该用户的shell user 执行人，只是显示在远程机器的日志中 listen 中控机监听端口，默认在65112 .. 65535中找一个没有被使用的端口 addr shell反弹的地址，默认情况下是被操作的机器获取到调用的ip地址，如果是多区域情况下，需要指定为中控机的外网ip，否则被控制机会跳转到代理机器的内网ip 安全 反弹shell会先验证uuid才会把tcp连接建立起来 例 feng@feng-pc:~$ mydan shell -h 127.0.0.1 root@feng-pc:/home/feng# 注 如果中控机没有外网ip，需要用mydan shellv2命令替代，这个需要安装2.0.0版本以上的mydan Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/shellv2.html":{"url":"tools/shellv2.html","title":"shellv2","keywords":"","body":"mydan shell root@feng-pc:# mydan shellv2 SYNOPSIS $0 --host host get a shell from remote machine $0 --host host [--user user(default `id -un`)] [--sudo sudoer] 获取远程shell, 没有mydan shell相比，这个不需要控制机有外网ip，也不需要被控制机可以上公网 参数 host 要操作的机器 user 操作用户，只用于显示在远程服务器日志中 sudo 真正执行的用户，即获取的是这个用户的shell 原理 shellv2和shell一样都是反弹远程机器的bash，他们的区别是，shell是直接把反弹的tcp连接到控制机器上。shellv2则是把bash反弹到了agent上，中控机也连接到agent上，然后两个tcp对接起来 例 feng@feng-pc:~$ mydan shellv2 -h 127.0.0.1 root@feng-pc:/home/feng# 注 这个需要mydan在2.0.0版本以上 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/alias.html":{"url":"tools/alias.html","title":"alias","keywords":"","body":"mydan alias root@feng-pc:~# mydan alias alias ssh='/usr/bin/ssh' mydan内部使用的alias, 比如mssh会用到ssh命令，但是ssh可能是别的程序或者说需要其他的参数，就可以通过别名来处理 例 root@feng-pc:~# mydan alias alias ssh='/usr/bin/ssh' root@feng-pc:~# mydan alias ssh=/bin/ssh root@feng-pc:~# mydan alias alias ssh='/bin/ssh' Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/unalias.html":{"url":"tools/unalias.html","title":"unalias","keywords":"","body":"mydan unalias mydan unalias keyname1 mydan内部使用的unalias 例 root@feng-pc:~# mydan unalias ssh Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/fastmd5.html":{"url":"tools/fastmd5.html","title":"fastmd5","keywords":"","body":"mydan fastmd5 [root@feng-pc]# mydan fastmd5 SYNOPSIS $0 /path/file 计算文件md5,如果文件大小大于2兆并且大于阈值（默认5G）,则直接计算文件的前1兆和最后1兆的内容加上文件的大小用来计算md5。（ $size:$head:$tail ） 数据同步的时候使用fastmd5来计算文件的md5 例 [root@feng-pc]# time mydan fastmd5 /tmp/1G 4807b06b94db1cd9426d43c9d02ec2b6 /tmp/1G real 0m0.197s user 0m0.176s sys 0m0.021s 阈值 查看阈值 [root@feng-pc]# mydan config util.fastmd5 5368709120 调整阈值 [root@feng-pc]# mydan config util.fastmd5=5368709121 [root@feng-pc]# mydan config util.fastmd5 5368709121 在做文件同步的机器之间阈值要统一，否则会因为md5计算出来的结果不一致而出现同步失败的现象 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/sync.html":{"url":"tools/sync.html","title":"sync","keywords":"","body":"mydan sync root@feng-pc:~# mydan sync sync: util.proxy,go,node.cache,pass,gateway,hosts sync util.proxy ... --2018-12-15 17:05:07-- http://127.0.0.1:5555/download/sync/util.proxy 正在连接 127.0.0.1:5555... 失败：拒绝连接。 sync util.proxy fail. 从dashboard中同步配置到本地 默认情况下 /opt/mydan/dan/.config 中配置的api地址是http://127.0.0.1:5555 ，如果dashboar不是在这个地址，需要对应的修改 修改api地址 root@feng-pc:~# mydan config api.addr=http://mydan.xxx.org:5555 其中mydan.xxx.org是dashboard的地址 例 root@feng-pc:~# mydan sync sync: pass,go,hosts,gateway,node.cache,util.proxy sync pass ... --2018-12-23 10:22:48-- http://mydan.xxx.org:5555/download/sync/pass 正在解析主机 mydan.xxx.org (mydan.xxx.org)... 10.10.10.11 正在连接 mydan.xxx.org (mydan.xxx.org)|10.10.10.11|:5555... 已连接。 已发出 HTTP 请求，正在等待回应... 200 OK 长度： 234 [application/data] 正在保存至: “/opt/mydan/etc/util/conf/pass.tmp” /opt/mydan/etc/util/conf/pass.tmp 100%[=======================================================================================================>] 234 --.-KB/s in 0s 2018-12-23 10:22:49 (29.1 MB/s) - 已保存 “/opt/mydan/etc/util/conf/pass.tmp” [234/234]) sync go ... --2018-12-23 10:22:49-- http://mydan.xxx.org:5555/download/sync/go 正在解析主机 mydan.xxx.org (mydan.xxx.org)... 10.10.10.11 正在连接 mydan.xxx.org (mydan.xxx.org)|10.10.10.11|:5555... 已连接。 已发出 HTTP 请求，正在等待回应... 200 OK 长度： 1020 [application/data] 正在保存至: “/opt/mydan/etc/util/conf/go.tmp” /opt/mydan/etc/util/conf/go.tmp 100%[=======================================================================================================>] 1020 --.-KB/s in 0s 2018-12-23 10:22:49 (145 MB/s) - 已保存 “/opt/mydan/etc/util/conf/go.tmp” [1020/1020]) sync hosts ... --2018-12-23 10:22:53-- http://mydan.xxx.org:5555/download/sync/hosts 正在解析主机 mydan.xxx.org (mydan.xxx.org)... 10.10.10.11 正在连接 mydan.xxx.org (mydan.xxx.org)|10.10.10.11|:5555... 已连接。 已发出 HTTP 请求，正在等待回应... 200 OK 长度： 475632 (464K) [application/data] 正在保存至: “/opt/mydan/etc/hosts.tmp” /opt/mydan/etc/hosts.tmp 100%[=======================================================================================================>] 464.48K 595KB/s in 0.8s 2018-12-23 10:22:54 (595 KB/s) - 已保存 “/opt/mydan/etc/hosts.tmp” [475632/475632]) sync gateway ... --2018-12-23 10:22:54-- http://mydan.xxx.org:5555/download/sync/gateway 正在解析主机 mydan.xxx.org (mydan.xxx.org)... 10.10.10.11 正在连接 mydan.xxx.org (mydan.xxx.org)|10.10.10.11|:5555... 已连接。 已发出 HTTP 请求，正在等待回应... 200 OK 长度： 309 [application/data] 正在保存至: “/opt/mydan/etc/util/conf/gateway.tmp” /opt/mydan/etc/util/conf/gateway.tmp 100%[=======================================================================================================>] 309 --.-KB/s in 0s 2018-12-23 10:22:54 (20.9 MB/s) - 已保存 “/opt/mydan/etc/util/conf/gateway.tmp” [309/309]) sync node.cache ... --2018-12-23 10:22:54-- http://mydan.xxx.org:5555/download/sync/node.cache 正在解析主机 mydan.xxx.org (mydan.xxx.org)... 10.10.10.11 正在连接 mydan.xxx.org (mydan.xxx.org)|10.10.10.11|:5555... 已连接。 已发出 HTTP 请求，正在等待回应... 200 OK 长度： 1376256 (1.3M) [x-chemical/x-cache] 正在保存至: “/opt/mydan/etc/node/cache/current.tmp” /opt/mydan/etc/node/cache/current.tmp 100%[=======================================================================================================>] 1.31M 591KB/s in 2.3s 2018-12-23 10:22:56 (591 KB/s) - 已保存 “/opt/mydan/etc/node/cache/current.tmp” [1376256/1376256]) sync util.proxy ... --2018-12-23 10:22:57-- http://mydan.xxx.org:5555/download/sync/util.proxy 正在解析主机 mydan.xxx.org (mydan.xxx.org)... 10.10.10.11 正在连接 mydan.xxx.org (mydan.xxx.org)|10.10.10.11|:5555... 已连接。 已发出 HTTP 请求，正在等待回应... 200 OK 长度： 1271 (1.2K) [application/data] 正在保存至: “/opt/mydan/etc/util/conf/proxy.tmp” /opt/mydan/etc/util/conf/proxy.tmp 100%[=======================================================================================================>] 1.24K --.-KB/s in 0s 2018-12-23 10:22:57 (173 MB/s) - 已保存 “/opt/mydan/etc/util/conf/proxy.tmp” [1271/1271]) Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/xtar.html":{"url":"tools/xtar.html","title":"xtar","keywords":"","body":"mydan xtar root@feng-pc:~# mydan xtar SYNOPSIS $0 [--script script.sh] [--package foo.tar.gz] [--output file] package filename is $TMP in the script 脚本和数据压缩工具，可以把命令和数据打包在一起 准备 压缩文件 root@feng-pc:/tmp/xx# mkdir -p foo && date > foo/time && tar -zcvf foo.tar.gz foo foo/ foo/time 脚本 root@feng-pc:/tmp/xx# cat > foo.sh #!/bin/bash > tar -zxvf $TMP -C /tmp/ || exit 1 > cat /tmp/foo/time > EOF 打包 root@feng-pc:/tmp/xx# mydan xtar --script foo.sh --package foo.tar.gz --output foo.123.sh 记录了0+1 的读入 记录了0+1 的写出 64 bytes copied, 0.000149426 s, 428 kB/s 记录了0+1 的读入 记录了0+1 的写出 206 bytes copied, 0.0145471 s, 14.2 kB/s 执行 root@feng-pc:/tmp/xx# ./foo.123.sh 记录了1+0 的读入 记录了1+0 的写出 1024 bytes (1.0 kB, 1.0 KiB) copied, 0.000157302 s, 6.5 MB/s 记录了0+1 的读入 记录了0+1 的写出 206 bytes copied, 0.000143735 s, 1.4 MB/s foo/ foo/time 2018年 12月 23日 星期日 10:39:33 CST Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/git.html":{"url":"tools/git.html","title":"git","keywords":"","body":"mydan git root@feng-pc:~# mydan git Usage: git -i ssh-key-file git-command git -u foo git-command git工具，和默认的git一样，git中的默认工具不能指定ssh-key文件路径和用户，这个就是为了解决能制定key文件的问题 比如当前是在root用户下进行操作，需要操作feng的仓库，需要指定-u feng 指明使用的是feng这个用户的key 例 指定key root@feng-pc:/tmp/xx# mydan git -i /home/feng/.ssh/id_rsa clone https://github.com/MYDan/mayi 正克隆到 'mayi'... remote: Enumerating objects: 390, done. remote: Counting objects: 100% (390/390), done. remote: Compressing objects: 100% (264/264), done. remote: Total 4140 (delta 192), reused 283 (delta 116), pack-reused 3750 接收对象中: 100% (4140/4140), 632.70 KiB | 193.00 KiB/s, 完成. 处理 delta 中: 100% (2378/2378), 完成. 检查连接... 完成。 指定用户 root@feng-pc:/tmp/xx# mydan git -u feng clone https://github.com/MYDan/mayi 正克隆到 'mayi'... remote: Enumerating objects: 390, done. remote: Counting objects: 100% (390/390), done. remote: Compressing objects: 100% (264/264), done. remote: Total 4140 (delta 192), reused 283 (delta 116), pack-reused 3750 接收对象中: 100% (4140/4140), 632.70 KiB | 603.00 KiB/s, 完成. 处理 delta 中: 100% (2378/2378), 完成. 检查连接... 完成。 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/alarm.html":{"url":"tools/alarm.html","title":"alarm","keywords":"","body":"mydan alarm mydan alarm #alarm number-of-seconds command .. 设置超时闹钟运行命令 到超时时间后会给运行的进程发送KILL（9）信号例 root@feng-pc:~# mydan alarm 3 echo ok ok Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/bigest.html":{"url":"tools/bigest.html","title":"bigest","keywords":"","body":"mydan bigest mydan bigest #Find the biggest file/directory under a path # $0 # $0 /data 查找大文件 默认情况下查找的是当前路径 例 root@feng-pc:/opt/mydan/dan/tools# mydan bigest 16.6M /opt/mydan/dan/tools/repo 9.8M /opt/mydan/dan/tools/repo/data 2.4M /opt/mydan/dan/tools/repo/data/release-003 2.4M /opt/mydan/dan/tools/repo/data/release-003/opt 2.4M /opt/mydan/dan/tools/repo/data/release-003/opt/mydan 2.4M /opt/mydan/dan/tools/repo/data/release-003/opt/mydan/mayi 1.4M /opt/mydan/dan/tools/repo/data/release-003/opt/mydan/mayi/.git 1.3M /opt/mydan/dan/tools/repo/data/release-003/opt/mydan/mayi/.git/objects 595.7K /opt/mydan/dan/tools/repo/data/release-003/opt/mydan/mayi/.git/objects/pack 502.4K /opt/mydan/dan/tools/repo/data/release-003/opt/mydan/mayi/.git/objects/pack/pack-4565141d431023641d77b17c89f749e35395f7ca.pack Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/expect.html":{"url":"tools/expect.html","title":"expect","keywords":"","body":"mydan expect root@feng-pc:~# mydan expect SYNOPSIS $0 cmd .. 应答方式的执行命令 配置 root@feng-pc:~# cat /opt/mydan/etc/util/conf/expect Passwd: \"12345\\n\" Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/release.html":{"url":"tools/release.html","title":"release","keywords":"","body":"mydan release root@feng-pc:~# mydan release -? Usage: $0 show pack list $0 --pack v1.0 package $0 --release v1.0 release 发布mydan, 把本地的mydan打包成一个可以运行的文件，方便拷贝到别的地方安装 正常情况下用快速安装的方法安装就即可，但是有些不能上公网的情况下就需要把本地的mydan打包成一个可以执行的安装包 如果是在dashboard的机器上打的包，在dasoboard页面上可以看到新打的包的版本，可以通过dashboard上的链接直接安装，否则在 例 root@feng-pc:/opt/mydan# mydan release --release v1.0 root@feng-pc:/opt/mydan# find /opt/mydan/ -name *v1.0* /opt/mydan/etc/dashboard/download/agent/Linux.x86_64/mydan.v1.0.tar.gz /opt/mydan/etc/dashboard/download/agent/Linux.x86_64/mydan.v1.0.client /opt/mydan/etc/dashboard/download/agent/Linux.x86_64/mydan.v1.0.agent /opt/mydan/tmp/release/v1.0 工具会根据系统类型打包，例子中是Linux的x86_64的机器，把mydan.v1.0.agent 拷贝到要安装的机器上，允许这个脚本即可（这个脚本中已经包涵了数据和脚本是用mydan xtar压缩在了一起） Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/supervisor.html":{"url":"tools/supervisor.html","title":"supervisor","keywords":"","body":"mydan supervisor root@feng-pc:~# mydan supervisor SYNOPSIS $0 --cmd ./myserver --log /tmp/mylog/path [--size 10000000 ] [--keep 5] [--name myprocname] $0 --cmd ./myserver --log /tmp/mylog/path --http http://127.0.0.1:8080 $0 --cmd ./myserver --log /tmp/mylog/path --http http://127.0.0.1:8080 --check OK --count 10 守护的方式启动进程 参数 cmd 要守护的命令 log 日志目录 size 一个日志文件的大小 keep 保留几个日志文件 name 守护进程名称 count 被守护的进程的启动次数，超过这个次数就不在守护，守护进程退出 http 检查http，如果检查结果不符合预期，重启cmd命令 例 root@feng-pc:/opt/mydan/dan/tools# mydan supervisor --cmd ./foo.pl --log /tmp/log/foo root@feng-pc:/opt/mydan/dan/tools# tail /tmp/log/foo/current @400000005c21c83400000000 [START:1] @400000005c21c83400000000 [STDOUT] 1545717802 @400000005c21c83500000000 [STDOUT] 1545717803 @400000005c21c83600000000 [STDOUT] 1545717804 @400000005c21c83700000000 [STDOUT] 1545717805 @400000005c21c83800000000 [STDOUT] 1545717806 root@feng-pc:~# tail /tmp/log/foo/current |mydan tai64nlocal 2018-12-23 14:04:51.000000000 [STDOUT] 1545717891 2018-12-23 14:04:52.000000000 [STDOUT] 1545717892 2018-12-23 14:04:53.000000000 [STDOUT] 1545717893 2018-12-23 14:04:54.000000000 [STDOUT] 1545717894 2018-12-23 14:04:55.000000000 [STDOUT] 1545717895 2018-12-23 14:04:56.000000000 [STDOUT] 1545717896 2018-12-23 14:04:57.000000000 [STDOUT] 1545717897 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/tai64nlocal.html":{"url":"tools/tai64nlocal.html","title":"tai64nlocal","keywords":"","body":"mydan tai64nlocal mydan tai64nlocal 将tai64n时间戳转换成本地时间 例 root@feng-pc:~# tail /opt/mydan/var/logs/bootstrap/current|mydan tai64nlocal 2018-12-15 17:24:09.000000000 [collector] [STDOUT] do(23)... 2018-12-15 17:24:12.000000000 [collector] [STDOUT] do(24)... 2018-12-15 17:24:15.000000000 [collector] [STDOUT] do(25)... 2018-12-15 17:24:18.000000000 [collector] [STDOUT] do(26)... 2018-12-15 17:24:21.000000000 [collector] [STDOUT] do(27)... Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/diagnosis.html":{"url":"tools/diagnosis.html","title":"diagnosis","keywords":"","body":"mydan diagnosis mydan diagnosis 系统诊断工具 当前只有disk和net的简单插件，这个需要丰富插件，运行后给系统打一个分数 例 root@feng-pc:~# mydan diagnosis os: Linux arch:x86_64 =========================================================================== disk/space/data =========================================================================== disk/space/inode =========================================================================== net/connect/tcp --- ESTABLISHED: 21 LISTEN: 26 TIME_WAIT: 5 =========================================================================== net/ping/baidu PING www.baidu.com (180.149.132.151) 56(84) bytes of data. 64 bytes from 180.149.132.151: icmp_seq=1 ttl=48 time=2.82 ms 64 bytes from 180.149.132.151: icmp_seq=2 ttl=48 time=3.20 ms 64 bytes from 180.149.132.151: icmp_seq=3 ttl=48 time=2.86 ms --- www.baidu.com ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2003ms rtt min/avg/max/mdev = 2.823/2.962/3.203/0.181 ms score: 100 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/tcpserver.html":{"url":"tools/tcpserver.html","title":"tcpserver","keywords":"","body":"mydan tcpserver root@feng-pc:~# mydan tcpserver SYNOPSIS $0 [--port num] [--max num] script [--whitelist file] 把脚本提供成tcp服务 参数 port 端口 max 最大连接数 whitelist 白名单列表，可以不指定，不指定表示全部开放 限速 查看配置 root@feng-pc:# mydan config tcpserver --- ReservedSpaceCount: 10 ReservedSpaceSize: 2 rbuf: 104857600 rlimit: 20971520 wlimit: 20971520 rlimit , 入流量的限制，单位B wlimit , 出流量的限制，单位B 限速默认都是20兆 修改配置 mydan config tcpserver.rlimit=20971520 修改配置需要重启tcpserver服务 例 root@feng-pc:~# mydan tcpserver -p 65111 -m 10 /opt/mydan/dan/agent/bin/agent mydan 的agent就是根据这个服务启起来的 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/deploy.html":{"url":"tools/deploy.html","title":"deploy","keywords":"","body":"mydan deploy root@feng-pc:~# mydan deploy SYNOPSIS $0 [--repo /my/repo ] [--link /my/link] [--version release-x.x.x] [--path /my/path ( default $repo/data ) ] [--keep 10 (default 10)] [--taropt '-m'] Version 'release-x.x.x' and 'rollback:release-x.x.x' are the same Version backup refers to the $link.backup Version backup\\d* refers to the $link.backup\\d* 本地发布切链接小工具 repo: 各版本的压缩包存放的路径 link: 应用的软链接 path: 包被解压后存放的路径，如果不指定，会放到repo/data路径下 keep: 保留的版本个数 taropt: 解压时添加的tar参数，默认已经添加-zxf,添加的参数紧接在tar命令之后，(如 --taropt \"-m\" 不要解压文件的修改时间) 如果版本的名字规则是 backup\\d , 切换版本的操作变成了把link直接指向link.backup\\d ,切换版本的过程中，如果link是一个目录，会被从命名成 link.backup rollback:release-x.x.x 如果版本是\"rollback:\"开头，会直接把\"rollback:\"这个前缀去掉 如果A版本之前发布过并且解压包没有因为keep的限制被删除掉，这时候如果回滚回A版本，就不会重新从解压 例 root@feng-pc:/tmp# mydan deploy --repo /tmp/repo --link /tmp/apps --version 001 mkdir '/tmp/repo/data/001.1545719254.21590._tmp_explain' tar -zxf '/tmp/repo/001' -C '/tmp/repo/data/001.1545719254.21590._tmp_explain' rm -rf '/tmp/repo/data/001' && mv '/tmp/repo/data/001.1545719254.21590._tmp_explain' '/tmp/repo/data/001' ln -fsn '/tmp/repo/data/001' '/tmp/apps' root@feng-pc:/tmp# ll /tmp/apps lrwxrwxrwx 1 root root 18 12月 23 14:27 /tmp/apps -> /tmp/repo/data/001/ root@feng-pc:/tmp# ll /tmp/repo 总用量 16 drwxr-xr-x 3 root root 4096 12月 23 14:27 ./ drwxrwxrwt 17 root root 4096 12月 23 14:27 ../ -rw-r--r-- 1 root root 191 12月 23 14:27 001 drwxr-xr-x 3 root root 4096 12月 23 14:27 data/ /tmp/repo下是各个版本的程序包，每一个包是tar.gz文件，但是不需要文件后缀 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/check.html":{"url":"tools/check.html","title":"check","keywords":"","body":"mydan check root@feng-pc:~# mydan check SYNOPSIS $0 proc.num proc.num name [=~]foo [<>=]5 ... proc.num cmdline =foo '>1' '1' proc.time name =foo '>180' http.check http.check [get|post] http://127.0.0.1/stat code 200 300 http.check [get|post] http://127.0.0.1/stat grep ok health net.port.listen net.port.listen tcp 80 22 net.port.listen udp 53 --debug 检查服务的小工具 例 [root@feng-pc ~]# mydan check net.port.listen tcp 80 22 [Error] tcp 80 not listen tcp 22 listen Check ERROR. [root@feng-pc ~]# echo $? 255 通过返回码来判断成功还是失败 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/secure.html":{"url":"tools/secure.html","title":"secure","keywords":"","body":"mydan secure root@feng-pc:~# mydan secure SYNOPSIS $0 --pull $0 --add /path/file1 $0 --del /path/file1 $0 --show $0 --push 私密文件管理小工具 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/diskSpaceControl.html":{"url":"tools/diskSpaceControl.html","title":"diskSpaceControl","keywords":"","body":"mydan diskSpaceControl root@feng-pc:~# mydan diskSpaceControl SYNOPSIS $0 [--mountedOnPath /data] [--percent 90 ] $0 [--mountedOnPath /data] [--percent 10.1] [--interval 60] 把磁盘的使用空间控制在某个百分比的工具 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/node.html":{"url":"tools/node.html","title":"node","keywords":"","body":"mydan node 请查看之前机器管理章节 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/code.html":{"url":"tools/code.html","title":"code","keywords":"","body":"mydan code 请查看之前仓库管理章节 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/checkuser.html":{"url":"tools/checkuser.html","title":"checkuser","keywords":"","body":"mydan checkuser 请查看之前仓库管理章节 查看用户状态 root@feng:# mydan checkuser --email lijinfeng active 这是仓库管理中用到的插件，用于判断用户是处于什么状态，比如是否离职。 仓库管理需要把已离职人员的git和svn账号给block掉。 插件 您需要实现自己的插件 /opt/mydan/dan/code/plugin/checkuser.private 默认调用/opt/mydan/dan/code/plugin/checkuser插件，返回active状态。 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/reborn.html":{"url":"tools/reborn.html","title":"reborn","keywords":"","body":"mydan reborn root@feng-pc:~# mydan reborn --- dns: 127.0.1.1 hostname: feng-pc url: https://raw.githubusercontent.com/MYDan/openapi/master/reborn/ks.list SYNOPSIS $0 --ipaddr 10.10.10.2 --netmask 10.0.255.255 --gateway 10.10.10.1 --hostname abc.mydan.org --dns 8.8.8.8 --mac 50-7b-9d-06-00-00 $0 --ipaddr 10.10.10.2 --netmask 10.0.255.255 --gateway 10.10.10.1 --hostname abc.mydan.org --dns 8.8.8.8 --mac 50-7b-9d-06-00-00 --ks=http://mydan.org/ks.cfg $0 --verbose $0 --url http://xxx.xxx.xxx/ks.list #default in .config 重装系统工具 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"tools/os.html":{"url":"tools/os.html","title":"os","keywords":"","body":"mydan os root@feng-pc:/opt/mydan/mayi# mydan os CPU: model name: Intel(R) Core(TM) i3-5010U CPU @ 2.10GHz cpu MHz: 1910.425 cache size: 3072 KB cores cnt: 4 MEM: Mem: 3651 MB Swap: 3790 MB DISK: /dev/sda1: 455G OS: Description: Ubuntu 16.04.3 LTS Kernel Version: 4.4.0-141-generic Started Since: 2019-01-18 20:03:53 Module Loadable: Yes Iptables Rules: On 获取当前服务器的cpu/mem等信息 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"faq/":{"url":"faq/","title":"FAQ","keywords":"","body":"mydan使用手册 Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "},"faq/window.html":{"url":"faq/window.html","title":"window下安装","keywords":"","body":"在window平台下使用手册 简介 window下需要借助cygwin，Cygwin是一个在windows平台上运行的类UNIX模拟环境。 对于mydan来说使用方式和linux下基本一样，主要需要说明的是Cygwin的安装、包依赖，服务依赖。 安装Cygwin 到Cygwin官网https://www.cygwin.com 下载最新的setup.exe程序。下载后双击打开 1. 选择安装方式：Install from Internet 2. 选择安装的路径，如: C:\\cygwin-mydan 3. 选择本地包路径，这个路径是安装过程中存放的下载包的路径，使用默认的即可，随意 4. 选择你的网络链接，看情况而定，默认是不需要代理的Direct Connection 5. 选择下载网点，这里需要选择一个可用的下载网点，推荐ftp://ftp.mirrorsservice.org 6. 选择需要安装的包： 在View中选Full，然后搜索下面的包，并且勾选上 curl: Multi-protocol file transfer tool wget: Utility to retrieve files from the WWW via HTTP and FTP make: The GNU version of the `make` utility rsync: Fast remote file transfer program (can use existing data to minimize transfer) cygrunsrv: NT/W2K service initiator cron: Vixie's cron 7. 点击下一步，完成安装. 启动相关服务 mydan需要crontab服务来启动，所以需要把crontab服务做开机启动。（当然也可以开启启动的时候直接启动mydan的bootstrap） 操作步骤如下： 1. 找到安装目录下的批处理文件Cygwin（bat文件，如安装在C:\\cygwin-mydan，则这个文件的全路径名应该是C:\\cygwin-mydan\\Cygwin.bat), 右键选择“以管理员身份运行”。正常情况下会打开一个和linux中的shell类似的控制台 2. 一般服务器的Administrator肯定设有密码的，所以这个时候要配置cron服务并以验证密码以管理员权限登陆才能启动cron，大家按照下面的提示操作： $ cron-config Do you want to install the cron daemon as a service? (yes/no) yes Enter the value of CYGWIN for the daemon: [ ] crontab Do you want the cron daemon to run as yourself? (yes/no) yes Please enter the password for user 'Administrator':键入密码 Reenter:再次键入密码 3. 启动 cygserver: cygrunsrv -I cygserver -p /usr/sbin/cygserver -e \"CYGWIN=server\" 4. 将cron安装为windows服务: cygrunsrv -I crontab -p /usr/sbin/cron.exe 5. 启动cron服务： cygrunsrv -S crontab 6. 用cronevents 查看运行日志,如出现 “can't switch user context” 错误用命令：passwd -R 来设置密码 安装mydan 和在linux上一样，在控制台中运行安装命令 curl -L install.mydan.org|bash 点击查看已有的编译好的perl,如果列表中没有合适您系统版本的编译好的perl，安装脚本会使用系统的perl，这样可能会话很长的时间，同时安装依赖模块的时候可能失败，如果您在新的系统版本中使用了mydan，欢迎上传您编译好的perl Cygwin参考资料 https://www.cygwin.com http://blog.chinaunix.net/uid-10540984-id-1629742.html https://www.cnblogs.com/Li-Cheng/articles/4397208.html https://www.cnblogs.com/yougewe/archive/2015/12/03/5016409.html Copyright 2017 - 2018. all right reserved，powered by Gitbook该文件修订时间： 2020-07-16 18:11:39 "}}